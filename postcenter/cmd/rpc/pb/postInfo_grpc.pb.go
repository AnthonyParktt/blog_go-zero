// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: postInfo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PostInfo_GetPostListPage_FullMethodName         = "/pb.PostInfo/GetPostListPage"
	PostInfo_GetPostDetail_FullMethodName           = "/pb.PostInfo/GetPostDetail"
	PostInfo_CreatePost_FullMethodName              = "/pb.PostInfo/CreatePost"
	PostInfo_DeletePost_FullMethodName              = "/pb.PostInfo/DeletePost"
	PostInfo_UpdatePost_FullMethodName              = "/pb.PostInfo/UpdatePost"
	PostInfo_GetCommentsInfoListPage_FullMethodName = "/pb.PostInfo/GetCommentsInfoListPage"
	PostInfo_GetCommentsInfoDetail_FullMethodName   = "/pb.PostInfo/GetCommentsInfoDetail"
	PostInfo_CreateCommentsInfo_FullMethodName      = "/pb.PostInfo/CreateCommentsInfo"
	PostInfo_DeleteCommentsInfo_FullMethodName      = "/pb.PostInfo/DeleteCommentsInfo"
)

// PostInfoClient is the client API for PostInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostInfoClient interface {
	GetPostListPage(ctx context.Context, in *PostSearchRequest, opts ...grpc.CallOption) (*PostInfoListPage, error)
	GetPostDetail(ctx context.Context, in *PostInfoId, opts ...grpc.CallOption) (*PostInfoDetailWithComments, error)
	CreatePost(ctx context.Context, in *PostInfoCreateRequest, opts ...grpc.CallOption) (*PostInfoId, error)
	DeletePost(ctx context.Context, in *PostInfoId, opts ...grpc.CallOption) (*PostInfoDeleteResponse, error)
	UpdatePost(ctx context.Context, in *PostInfoBase, opts ...grpc.CallOption) (*ExecRows, error)
	GetCommentsInfoListPage(ctx context.Context, in *CommentPostId, opts ...grpc.CallOption) (*CommentsInfoListPage, error)
	GetCommentsInfoDetail(ctx context.Context, in *CommentsInfoId, opts ...grpc.CallOption) (*CommentsInfoDetail, error)
	CreateCommentsInfo(ctx context.Context, in *CommentsInfoCreateRequest, opts ...grpc.CallOption) (*CommentsInfoId, error)
	DeleteCommentsInfo(ctx context.Context, in *CommentsInfoId, opts ...grpc.CallOption) (*CommentsInfoDeleteResponse, error)
}

type postInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewPostInfoClient(cc grpc.ClientConnInterface) PostInfoClient {
	return &postInfoClient{cc}
}

func (c *postInfoClient) GetPostListPage(ctx context.Context, in *PostSearchRequest, opts ...grpc.CallOption) (*PostInfoListPage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostInfoListPage)
	err := c.cc.Invoke(ctx, PostInfo_GetPostListPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postInfoClient) GetPostDetail(ctx context.Context, in *PostInfoId, opts ...grpc.CallOption) (*PostInfoDetailWithComments, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostInfoDetailWithComments)
	err := c.cc.Invoke(ctx, PostInfo_GetPostDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postInfoClient) CreatePost(ctx context.Context, in *PostInfoCreateRequest, opts ...grpc.CallOption) (*PostInfoId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostInfoId)
	err := c.cc.Invoke(ctx, PostInfo_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postInfoClient) DeletePost(ctx context.Context, in *PostInfoId, opts ...grpc.CallOption) (*PostInfoDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostInfoDeleteResponse)
	err := c.cc.Invoke(ctx, PostInfo_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postInfoClient) UpdatePost(ctx context.Context, in *PostInfoBase, opts ...grpc.CallOption) (*ExecRows, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecRows)
	err := c.cc.Invoke(ctx, PostInfo_UpdatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postInfoClient) GetCommentsInfoListPage(ctx context.Context, in *CommentPostId, opts ...grpc.CallOption) (*CommentsInfoListPage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentsInfoListPage)
	err := c.cc.Invoke(ctx, PostInfo_GetCommentsInfoListPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postInfoClient) GetCommentsInfoDetail(ctx context.Context, in *CommentsInfoId, opts ...grpc.CallOption) (*CommentsInfoDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentsInfoDetail)
	err := c.cc.Invoke(ctx, PostInfo_GetCommentsInfoDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postInfoClient) CreateCommentsInfo(ctx context.Context, in *CommentsInfoCreateRequest, opts ...grpc.CallOption) (*CommentsInfoId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentsInfoId)
	err := c.cc.Invoke(ctx, PostInfo_CreateCommentsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postInfoClient) DeleteCommentsInfo(ctx context.Context, in *CommentsInfoId, opts ...grpc.CallOption) (*CommentsInfoDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentsInfoDeleteResponse)
	err := c.cc.Invoke(ctx, PostInfo_DeleteCommentsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostInfoServer is the server API for PostInfo service.
// All implementations must embed UnimplementedPostInfoServer
// for forward compatibility.
type PostInfoServer interface {
	GetPostListPage(context.Context, *PostSearchRequest) (*PostInfoListPage, error)
	GetPostDetail(context.Context, *PostInfoId) (*PostInfoDetailWithComments, error)
	CreatePost(context.Context, *PostInfoCreateRequest) (*PostInfoId, error)
	DeletePost(context.Context, *PostInfoId) (*PostInfoDeleteResponse, error)
	UpdatePost(context.Context, *PostInfoBase) (*ExecRows, error)
	GetCommentsInfoListPage(context.Context, *CommentPostId) (*CommentsInfoListPage, error)
	GetCommentsInfoDetail(context.Context, *CommentsInfoId) (*CommentsInfoDetail, error)
	CreateCommentsInfo(context.Context, *CommentsInfoCreateRequest) (*CommentsInfoId, error)
	DeleteCommentsInfo(context.Context, *CommentsInfoId) (*CommentsInfoDeleteResponse, error)
	mustEmbedUnimplementedPostInfoServer()
}

// UnimplementedPostInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostInfoServer struct{}

func (UnimplementedPostInfoServer) GetPostListPage(context.Context, *PostSearchRequest) (*PostInfoListPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostListPage not implemented")
}
func (UnimplementedPostInfoServer) GetPostDetail(context.Context, *PostInfoId) (*PostInfoDetailWithComments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostDetail not implemented")
}
func (UnimplementedPostInfoServer) CreatePost(context.Context, *PostInfoCreateRequest) (*PostInfoId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostInfoServer) DeletePost(context.Context, *PostInfoId) (*PostInfoDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostInfoServer) UpdatePost(context.Context, *PostInfoBase) (*ExecRows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostInfoServer) GetCommentsInfoListPage(context.Context, *CommentPostId) (*CommentsInfoListPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsInfoListPage not implemented")
}
func (UnimplementedPostInfoServer) GetCommentsInfoDetail(context.Context, *CommentsInfoId) (*CommentsInfoDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsInfoDetail not implemented")
}
func (UnimplementedPostInfoServer) CreateCommentsInfo(context.Context, *CommentsInfoCreateRequest) (*CommentsInfoId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentsInfo not implemented")
}
func (UnimplementedPostInfoServer) DeleteCommentsInfo(context.Context, *CommentsInfoId) (*CommentsInfoDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentsInfo not implemented")
}
func (UnimplementedPostInfoServer) mustEmbedUnimplementedPostInfoServer() {}
func (UnimplementedPostInfoServer) testEmbeddedByValue()                  {}

// UnsafePostInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostInfoServer will
// result in compilation errors.
type UnsafePostInfoServer interface {
	mustEmbedUnimplementedPostInfoServer()
}

func RegisterPostInfoServer(s grpc.ServiceRegistrar, srv PostInfoServer) {
	// If the following call pancis, it indicates UnimplementedPostInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostInfo_ServiceDesc, srv)
}

func _PostInfo_GetPostListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostInfoServer).GetPostListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostInfo_GetPostListPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostInfoServer).GetPostListPage(ctx, req.(*PostSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostInfo_GetPostDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInfoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostInfoServer).GetPostDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostInfo_GetPostDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostInfoServer).GetPostDetail(ctx, req.(*PostInfoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostInfo_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInfoCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostInfoServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostInfo_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostInfoServer).CreatePost(ctx, req.(*PostInfoCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostInfo_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInfoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostInfoServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostInfo_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostInfoServer).DeletePost(ctx, req.(*PostInfoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostInfo_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInfoBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostInfoServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostInfo_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostInfoServer).UpdatePost(ctx, req.(*PostInfoBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostInfo_GetCommentsInfoListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentPostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostInfoServer).GetCommentsInfoListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostInfo_GetCommentsInfoListPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostInfoServer).GetCommentsInfoListPage(ctx, req.(*CommentPostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostInfo_GetCommentsInfoDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsInfoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostInfoServer).GetCommentsInfoDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostInfo_GetCommentsInfoDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostInfoServer).GetCommentsInfoDetail(ctx, req.(*CommentsInfoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostInfo_CreateCommentsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsInfoCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostInfoServer).CreateCommentsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostInfo_CreateCommentsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostInfoServer).CreateCommentsInfo(ctx, req.(*CommentsInfoCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostInfo_DeleteCommentsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsInfoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostInfoServer).DeleteCommentsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostInfo_DeleteCommentsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostInfoServer).DeleteCommentsInfo(ctx, req.(*CommentsInfoId))
	}
	return interceptor(ctx, in, info, handler)
}

// PostInfo_ServiceDesc is the grpc.ServiceDesc for PostInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PostInfo",
	HandlerType: (*PostInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostListPage",
			Handler:    _PostInfo_GetPostListPage_Handler,
		},
		{
			MethodName: "GetPostDetail",
			Handler:    _PostInfo_GetPostDetail_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _PostInfo_CreatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostInfo_DeletePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostInfo_UpdatePost_Handler,
		},
		{
			MethodName: "GetCommentsInfoListPage",
			Handler:    _PostInfo_GetCommentsInfoListPage_Handler,
		},
		{
			MethodName: "GetCommentsInfoDetail",
			Handler:    _PostInfo_GetCommentsInfoDetail_Handler,
		},
		{
			MethodName: "CreateCommentsInfo",
			Handler:    _PostInfo_CreateCommentsInfo_Handler,
		},
		{
			MethodName: "DeleteCommentsInfo",
			Handler:    _PostInfo_DeleteCommentsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "postInfo.proto",
}
